import os
import json
import cv2
import numpy as np
from PIL import Image

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def crop_polygon_from_image(image, polygon):
    mask = np.zeros(image.shape[:2], dtype=np.uint8)
    points = np.array(polygon, dtype=np.int32)
    cv2.fillPoly(mask, [points], 255)
    res = cv2.bitwise_and(image, image, mask=mask)
    
    rect = cv2.boundingRect(points)  # returns (x,y,w,h) of the rect
    cropped = res[rect[1]:rect[1]+rect[3], rect[0]:rect[0]+rect[2]]

    return cropped

def save_cropped_images(image_path, json_path):
    # Load image
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Cannot load image {image_path}")
        return
    
    # Load json data
    with open(json_path, 'r') as file:
        data = json.load(file)
    
    # Process each shape
    for shape in data['shapes']:
        label = shape['label']
        points = shape['points']
        
        # Create directory for the label if not exists
        create_directory(label)
        
        # Crop the image
        cropped_image = crop_polygon_from_image(image, points)
        
        # Save the cropped image
        base_name = os.path.basename(image_path)
        base_name_no_ext = os.path.splitext(base_name)[0]
        cropped_image_path = os.path.join(label, f"{base_name_no_ext}_{label}.png")
        cv2.imwrite(cropped_image_path, cropped_image)
        print(f"Saved cropped image: {cropped_image_path}")

if __name__ == "__main__":
    # Example usage
    json_file_path = 'path_to_your_json_file.json'
    image_file_path = json_file_path.replace('.json', '.png')
    
    save_cropped_images(image_file_path, json_file_path)
