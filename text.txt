3. app.py:

Python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/about')
def about():
    return render_template('about.html')

if __name__ == '__main__':
    app.run(debug=True)
Use code with caution.
4. templates/base.html:

This template defines the overall layout and includes placeholders for content and navigation elements:

HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Navigation App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <header>
        <h1>Flask Navigation App</h1>
        <nav>
            <ul>
                <li><a href="{{ url_for('home') }}">Home</a></li>
                <li><a href="{{ url_for('about') }}">About</a></li>
                </ul>
        </nav>
    </header>

    <main>
        {% block content %}{% endblock %}
    </main>

    <aside>
        <h2>Navigation</h2>
        <ul>
            <li><a href="{{ url_for('home') }}">Home</a></li>
            <li><a href="{{ url_for('about') }}">About</a></li>
            </ul>
    </aside>

</body>
</html>
Use code with caution.
5. templates/home.html and about.html:

These templates define the content specific to each page:

HTML
{% extends 'base.html' %}

{% block content %}
    <h1>Welcome to the Home Page!</h1>
    <p>This is the content for the home page.</p>
{% endblock %}

{% extends 'base.html' %}

{% block content %}
    <h1>About Us</h1>
    <p>This is the content for the About page.</p>
{% endblock %}
Use code with caution.
6. Optional: styles.css (in static folder):

You can create a styles.css file in the static folder to style your navigation bar and sidebar as desired. Consider using a CSS framework like Bootstrap to simplify the process.

7. Running the App:

Activate your virtual environment (if applicable).

Run the app:

Bash
python app.py
Use code with caution.
Visit http://127.0.0.1:5000/ in your web browser to see the app with both navigation bar and sidebar.

Enhancements:

Flexibility: The base template allows you to easily add more navigation links and adjust the layout as needed.
CSS Styling: While basic HTML is used here, consider using CSS frameworks for easier styling of navigation elements.
Scalability: The approach using templates makes it easy to maintain and scale the application with growing content.
Sources
stackoverflow.com/questions/47104359/flask-jinja2-exceptions-templatenotfound-error
