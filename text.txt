import cv2
import numpy as np

# Load the image
image = cv2.imread('your_image_path.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply GaussianBlur to reduce noise and improve line detection
blur = cv2.GaussianBlur(gray, (5, 5), 0)

# Use the Canny edge detector to find edges in the image
edges = cv2.Canny(blur, 50, 150)

# Specify the region of interest (ROI) for detecting horizontal lines
roi_height = image.shape[0] // 2  # Adjust the height of the ROI as needed
roi = edges[roi_height:, :]

# Use the Hough Line Transform to detect lines in the ROI
lines = cv2.HoughLines(roi, 1, np.pi / 180, 100)

# Lists to store coordinates of top and bottom lines
top_lines = []
bottom_lines = []

# Filter and draw only horizontal lines within the ROI, ignoring close to top or bottom borders
for line in lines:
    rho, theta = line[0]
    angle = np.degrees(theta)
    if 80 <= angle <= 100:  # Adjust this range based on the angle of horizontal lines
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = (b * rho) + roi_height  # Adjust y0 to account for the ROI offset
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))

        # Check if the line is not too close to the top or bottom borders
        if y1 > 10 and y2 > 10 and y1 < (image.shape[0] - 10) and y2 < (image.shape[0] - 10):
            midpoint_y = (y1 + y2) // 2
            if midpoint_y < image.shape[0] // 2:
                top_lines.append(((x1, y1), (x2, y2)))
            else:
                bottom_lines.append(((x1, y1), (x2, y2)))

# Display the result and print the classification
if len(top_lines) > len(bottom_lines):
    print("Lines are more on top of the image.")
else:
    print("Lines are more on the bottom of the image.")

# Draw lines on the original image
for line in top_lines:
    cv2.line(image, line[0], line[1], (0, 255, 0), 2)

for line in bottom_lines:
    cv2.line(image, line[0], line[1], (0, 0, 255), 2)

# Display the result
cv2.imshow('Detected Horizontal Lines', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
